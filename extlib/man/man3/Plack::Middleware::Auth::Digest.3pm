.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Plack::Middleware::Auth::Digest 3pm"
.TH Plack::Middleware::Auth::Digest 3pm "2015-04-01" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Plack::Middleware::Auth::Digest \- Digest authentication
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  enable "Auth::Digest", realm => "Secured", secret => "blahblahblah",
\&      authenticator => sub {
\&          my ($username, $env) = @_;
\&          return $password; # for $username
\&      };
\&
\&  # Or return MD5 hash of "$username:$realm:$password"
\&  enable "Auth::Digest", realm => "Secured", secret => "blahblahblah",
\&      password_hashed => 1,
\&      authenticator => sub { return $password_hashed };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Plack::Middleware::Auth::Digest is a Plack middleware component that
enables Digest authentication. Your \f(CW\*(C`authenticator\*(C'\fR callback is called using
two parameters: a username as a string and the \s-1PSGI \s0\f(CW$env\fR hash. Your callback
should return a password, either as a raw password or a hashed password.
.SH "CONFIGURATIONS"
.IX Header "CONFIGURATIONS"
.IP "authenticator" 4
.IX Item "authenticator"
A callback that takes a username and \s-1PSGI \s0\f(CW$env\fR hash and returns a password
for the user, either in a plaintext password or a \s-1MD5\s0 hash of
\&\*(L"username:realm:password\*(R" (quotes not included) when
\&\f(CW\*(C`password_hashed\*(C'\fR option is enabled.
.IP "password_hashed" 4
.IX Item "password_hashed"
A boolean (0 or 1) to indicate whether \f(CW\*(C`authenticator\*(C'\fR callback
returns passwords in a plaintext or hashed. Defaults to 0 (plaintext).
.IP "realm" 4
.IX Item "realm"
A string to represent the realm. Defaults to \fIrestricted area\fR.
.IP "secret" 4
.IX Item "secret"
Server secret text string that is used to sign nonce. Required.
.IP "nonce_ttl" 4
.IX Item "nonce_ttl"
Time-to-live seconds to prevent replay attacks. Defaults to 60.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
This middleware expects that the application has a full access to the
headers sent by clients in \s-1PSGI\s0 environment. That is normally the case
with standalone Perl \s-1PSGI\s0 web servers such as Starman or
HTTP::Server::Simple::PSGI.
.PP
However, in a web server configuration where you can't achieve this
(i.e. using your application via Apache's mod_cgi), this middleware
does not work since your application can't know the value of
\&\f(CW\*(C`Authorization:\*(C'\fR header.
.PP
If you use Apache as a web server and \s-1CGI\s0 to run your \s-1PSGI\s0
application, you can either a) compile Apache with
\&\f(CW\*(C`\-DSECURITY_HOLE_PASS_AUTHORIZATION\*(C'\fR option, or b) use mod_rewrite to
pass the Authorization header to the application with the rewrite rule
like following.
.PP
.Vb 2
\&  RewriteEngine on
\&  RewriteRule .* \- [E=HTTP_AUTHORIZATION:%{HTTP:Authorization},L]
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Yuji Shimada <xaicron@cpan.org>
.PP
Tatsuhiko Miyagawa
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Yuji Shimada, Tatsuhiko Miyagawa 2010\-
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Plack::Middleware::Auth::Basic
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
