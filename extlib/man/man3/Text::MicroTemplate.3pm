.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Text::MicroTemplate 3"
.TH Text::MicroTemplate 3 "2015-06-27" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::MicroTemplate \- Micro template engine with Perl5 language
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Text::MicroTemplate qw(:all);
\&
\&    # compile template, and render
\&    $renderer = build_mt(\*(Aqhello, <?= $_[0] ?>\*(Aq);
\&    $html = $renderer\->(\*(AqJohn\*(Aq)\->as_string;
\&
\&    # or in one line
\&    $html = render_mt(\*(Aqhello, <?= $_[0] ?>\*(Aq, \*(AqJohn\*(Aq)\->as_string;
\&
\&    # complex form
\&    $mt = Text::MicroTemplate\->new(
\&        template => \*(Aqhello, <?= $query\->param(\*(Aquser\*(Aq) ?>\*(Aq,
\&    );
\&    $code = $mt\->code;
\&    $renderer = eval << "..." or die $@;
\&    sub {
\&        my \e$query = shift;
\&        $code\->();
\&    }
\&    ...
\&    $html = $renderer\->(CGI\->new)\->as_string;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Text::MicroTemplate is a standalone, fast, intelligent, extensible template engine with following features.
.SS "standalone"
.IX Subsection "standalone"
Text::MicroTemplate does not rely on other \s-1CPAN\s0 modules.
.SS "fast"
.IX Subsection "fast"
Based on Mojo::Template, expressions in the template is perl code.
.SS "intelligent"
.IX Subsection "intelligent"
Text::MicroTemplate automatically escapes variables when and only when necessary.
.SS "extensible"
.IX Subsection "extensible"
Text::MicroTemplate does not provide features like template cache or including other files by itself.  However, it is easy to add you own (that suites the most to your application), by wrapping the result of the module (which is a perl expression).
.PP
The module only provides basic building blocks for a template engine.  Refer to Text::MicroTemplate::File for higher-level interface.
.SH "TEMPLATE SYNTAX"
.IX Header "TEMPLATE SYNTAX"
The template language is Perl5 itself!
.PP
.Vb 3
\&    # output the result of expression with automatic escape
\&    <?= $expr ?>             (tag style)
\&    ?= $expr                 (per\-line)
\&
\&    # execute perl code (tag style)
\&    <? foo() ?>
\&    ? foo()
\&
\&    # comment (tag style)
\&    <?# comment ?>
\&    ?# comment
\&
\&    # loops
\&    <ul>
\&    ? for my $item (@list) {
\&    <li><?= $item ?></li>
\&    ? }
\&    </ul>
.Ve
.SH "EXPORTABLE FUNCTIONS"
.IX Header "EXPORTABLE FUNCTIONS"
.SS "build_mt($template)"
.IX Subsection "build_mt($template)"
Returns a subref that renders given template.  Parameters are equivalent to Text::MicroTemplate\->new.
.PP
.Vb 2
\&    # build template renderer at startup time and use it multiple times
\&    my $renderer = build_mt(\*(Aqhello, <?= $_[0] ?>!\*(Aq);
\&
\&    sub run {
\&        ...
\&        my $hello = $renderer\->($query\->param(\*(Aquser\*(Aq));
\&        ...
\&    }
.Ve
.ie n .SS "render_mt($template, @args)"
.el .SS "render_mt($template, \f(CW@args\fP)"
.IX Subsection "render_mt($template, @args)"
Utility function that combines build_mt and call to the generated template builder.
.PP
.Vb 2
\&    # render
\&    $hello = render_mt(\*(Aqhello, <?= $_[0] ?>!\*(Aq, \*(AqJohn\*(Aq);
\&
\&    # print as HTML
\&    print $hello\->as_string;
\&
\&    # use the result in another template (no double\-escapes)
\&    $enc = render_mt(\*(Aq<h1><?= $_[0] ?></h1>\*(Aq, $hello);
.Ve
.PP
Internally, the function is equivalent to:
.PP
.Vb 1
\&    build_mt($template)\->(@_);
.Ve
.SS "encoded_string($str)"
.IX Subsection "encoded_string($str)"
wraps given string to an object that will not be escaped by the template engine
.SH "OO-STYLE INTERFACE"
.IX Header "OO-STYLE INTERFACE"
Text::MicroTemplate provides OO-style interface to handle more complex cases.
.SS "new($template)"
.IX Subsection "new($template)"
.SS "new(%args)"
.IX Subsection "new(%args)"
.SS "new(\e%args)"
.IX Subsection "new(%args)"
Constructs template renderer.  In the second or third form, parameters below are recognized.
.PP
\fItemplate\fR
.IX Subsection "template"
.PP
template string (mandatory)
.PP
\fIescape_func\fR
.IX Subsection "escape_func"
.PP
escape function (defaults to Text::MicroTemplate::escape_html), no escape when set to undef
.PP
\fIpackage_name\fR
.IX Subsection "package_name"
.PP
package under where the renderer is compiled (defaults to caller package)
.PP
\fIprepend\fR
.IX Subsection "prepend"
.PP
Prepends Perl code to the template.
.SS "\fIcode()\fP"
.IX Subsection "code()"
returns perl code that renders the template when evaluated
.SS "filter(sub filter_func { ... })\->(sub { template lines })"
.IX Subsection "filter(sub filter_func { ... })->(sub { template lines })"
filters given template lines
.PP
.Vb 3
\&    ? $_mt\->filter(sub { s/Hello/Good bye/g })\->(sub {
\&    Hello, John!
\&    ? })
.Ve
.SH "DEBUG"
.IX Header "DEBUG"
The \f(CW\*(C`MICRO_TEMPLATE_DEBUG\*(C'\fR environment variable helps debugging.
The value \f(CW1\fR extends debugging messages, \f(CW2\fR reports compiled
Perl code with \f(CW\*(C`warn()\*(C'\fR, \f(CW3\fR is like \f(CW2\fR but uses \f(CW\*(C`die()\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Text::MicroTemplate::File
.PP
Text::MicroTemplate::Extended
.SH "AUTHOR"
.IX Header "AUTHOR"
Kazuho Oku <kazuhooku gmail.com>
.PP
Tokuhiro Matsuno <tokuhirom \s-1AAJKLFJEF GMAIL COM\s0>
.PP
The module is based on Mojo::Template by Sebastian Riedel.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software, you can redistribute it and/or modify it under the same terms as Perl itself.
