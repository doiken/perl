.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Plack::App::Proxy::Test 3"
.TH Plack::App::Proxy::Test 3 "2012-11-06" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Plack::App::Proxy::Test \- Is utilities to test Plack::App::Proxy.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\&  test_proxy(
\&      app   => $backend_app,
\&      proxy => sub { Plack::App::Proxy\->new(remote => "http://$_[0]:$_[1]") },
\&      client => sub {
\&          my $cb = shift;
\&          my $res = $cb\->(GET \*(Aq/\*(Aq);
\&          ok $res\->is_success, "Check the status line.";
\&      },
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Plack::App::Proxy::Test provids test_proxy function which wraps 
test_psgi of Plack::Test simply.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "test_proxy" 4
.IX Item "test_proxy"
.Vb 3
\&  test_proxy app    => $app, 
\&             proxy  => $proxy_cb\->($app_host, $app_port), 
\&             client => $client_cb\->($cb);
.Ve
.PP
test_proxy runs two servers, '\f(CW\*(C`app\*(C'\fR' as an origin server and the proxy server.
In '\f(CW\*(C`proxy\*(C'\fR' callback, you should create the proxy server instance to send 
requests to '\f(CW\*(C`app\*(C'\fR' server. Then '\f(CW\*(C`client\*(C'\fR' callback is called to run your 
tests. In '\f(CW\*(C`client\*(C'\fR' callback, all \s-1HTTP\s0 requests are sent to '\f(CW\*(C`proxy\*(C'\fR' 
server. (And the proxy server will proxy your request to the app server.)
.SH "AUTHOR"
.IX Header "AUTHOR"
Masahiro Honma <hiratara@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Plack::App::Proxy Plack::Test
