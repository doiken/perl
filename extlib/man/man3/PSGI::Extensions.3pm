.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PSGI::Extensions 3"
.TH PSGI::Extensions 3 "2013-04-25" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PSGI::Extensions \- PSGI extensions
.SH "SPECIFICATION"
.IX Header "SPECIFICATION"
The \s-1PSGI\s0 environment \s-1MAY\s0 include the following additional
extensions. They are \s-1OPTIONAL\s0 and applications and middleware
components \s-1SHOULD\s0 check if they exist in the environment before
using the functionality provided.
.IP "\(bu" 4
\&\f(CW\*(C`psgix.io\*(C'\fR: The raw \s-1IO\s0 socket to access the client connection to do
low-level socket operations. This is only available in \s-1PSGI\s0 servers
that run as an \s-1HTTP\s0 server, and should be used when (and only when)
you want to \fIjailbreak\fR out of \s-1PSGI\s0 abstraction, to implement
protocols over \s-1HTTP\s0 such as \s-1BOSH\s0 or WebSocket.
.IP "\(bu" 4
\&\f(CW\*(C`psgix.input.buffered\*(C'\fR: A boolean which is true if the \s-1HTTP\s0 request
body (for \s-1POST\s0 or \s-1PUT\s0 requests) is buffered using a temporary
filehandle or PerlIO in \f(CW\*(C`psgi.input\*(C'\fR. When this is set, applications
or middleware components can safely \f(CW\*(C`read\*(C'\fR from \f(CW\*(C`psgi.input\*(C'\fR without
worrying about non-blocking I/O and then can call \f(CW\*(C`seek\*(C'\fR to rewind
the input for the transparent access.
.IP "\(bu" 4
\&\f(CW\*(C`psgix.logger\*(C'\fR: A code reference to log messages. The code reference
is passed one argument as a hash reference that represents a message
to be logged. The hash reference \s-1MUST\s0 include at least two keys:
\&\f(CW\*(C`level\*(C'\fR and \f(CW\*(C`message\*(C'\fR where \f(CW\*(C`level\*(C'\fR \s-1MUST\s0 be one of the following
strings: \f(CW\*(C`debug\*(C'\fR, \f(CW\*(C`info\*(C'\fR, \f(CW\*(C`warn\*(C'\fR, \f(CW\*(C`error\*(C'\fR and \f(CW\*(C`fatal\*(C'\fR. \f(CW\*(C`message\*(C'\fR
\&\s-1SHOULD\s0 be a plain string or a scalar variable that stringifies.
.IP "\(bu" 4
\&\f(CW\*(C`psgix.session\*(C'\fR: A hash reference for storing and retrieving session
data. Updates made on this hash reference \s-1SHOULD\s0 be persisted by
middleware components and \s-1SHOULD\s0 be restored in the succeeding
requests. How to persist and restore session data, as well as how to
identify the requesting clients are implementation specific.
.Sp
\&\f(CW\*(C`psgix.session.options\*(C'\fR: A hash reference to tell Middleware
components how to manipulate session data after the request.
Acceptable keys and values are implementation specific.
.IP "\(bu" 4
\&\f(CW\*(C`psgix.harakiri\*(C'\fR: A boolean which is true if the \s-1PSGI\s0 server supports
harakiri mode, that kills a worker (typically a forked child process)
after the current request is complete.
.Sp
\&\f(CW\*(C`psgix.harakiri.commit\*(C'\fR: A boolean which is set to true by the \s-1PSGI\s0
application or middleware when it wants the server to kill the worker
after the current request.
.IP "\(bu" 4
\&\f(CW\*(C`psgix.cleanup\*(C'\fR \- A boolean flag indicating whether a \s-1PSGI\s0 server
supports cleanup handlers. Absence of the key assumes false
(i.e. unsupported). Middleware and applications \s-1MUST\s0 check this key
before utilizing the cleanup handlers.
.Sp
\&\f(CW\*(C`psgix.cleanup.handlers\*(C'\fR \- Array reference to stack callback
handlers. This reference \s-1MUST\s0 be initialized as an empty array
reference by the servers. Applications can register the callbacks by
simply \fIpush()\fRing a code reference to this array reference. Callbacks
will be called once a request is complete, and will receive \f(CW$env\fR
as its first argument, and return value of the callbacks will be
simply ignored. An exception thrown inside callbacks \s-1MAY\s0 also be
ignored.
.Sp
If the server also supports \f(CW\*(C`psgix.harakiri\*(C'\fR, it \s-1SHOULD\s0 implement in
a way that cleanup handlers run before harakiri checker, so that the
cleanup handlers can commit the harakiri flag.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright Tatsuhiko Miyagawa, 2009\-2011.
.PP
This document is licensed under the Creative Commons license by-sa.
