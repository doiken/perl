.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Skinny::Manual::JA 3"
.TH DBIx::Skinny::Manual::JA 3 "2010-11-08" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Skinny::Manual::JA \- DBIx::Skinnyの設計思想など
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBIx::Skinnyをなぜ作る事にしたのか、
また作るにあたっての設計思想など。
.PP
Please translate and read the person in the sphere in English.
.SH "なぜDBIx::Skinnyを書いたのか"
.IX Header "なぜDBIx::Skinnyを書いたのか"
PerlのORマッパーは色々あります
.PP
Class::DBI, DBIx::Class, Data::ObjectDriber, Data::Model, etc...
.PP
ここにあげたORマッパーは基本的には利用者が設定したtable構成を基にSQLを組み立ててdatabaseにクエリを投げます。
.PP
そしてその結果を各種オブジェクトにしています。
.PP
私はいままでClass::DBIやDBIx::Classを色々使ってきました。
.PP
特にDBIx::ClassはとてもパワフルなORマッパーだと思います。
.PP
DBICはパワフルが由縁にとてもヘビーなORマッパーです。
.PP
とても複雑なSQLをPerlのデータ構造を基に組み立てる事ができるようにできていますが、
複雑なSQLを組み立てる場合、複雑なPerlのデータ構造を必要とします。
.PP
もちろん、dbhを普通に触ることもできるので、任意のSQLを実行させる事もできます。
ただ、任意のSQLを実行した場合、その結果はDBIを直接さわっているのとなんら変わりがありませんでした。
.PP
inflateもしてくれない、utf8周りの処理もしてくれない。
してくれないものだから、自前でその部分の処理を行う必要があります。
それではORマッパーの存在意義が薄くなってしまうと感じました。
.PP
せっかくDBICに色々なコンポーネントを追加しても任意のSQLを実行する場合その恩恵にあずかることができないのです。
.PP
また、DBICには色々な機能があるため、処理速度も重い方だと私はおもいます。
HotSpotな部分でパフォーマンスが求められる部分にはDBICを使わずにDBIを直接使う事もしばしばありました。
.PP
Skinnyの大きな目的としては
.PP
１：生のSQLを発行した時にinflateとかutf8\-flagを処理してくれる
.PP
２：update,insert,deleteはDBICというかよくあるORマッパーみたいにできる
.PP
３：簡単なselectもよくあるORマッパーみたいにできる
.PP
４：小さなオブジェクト群で構成されており、デバッグが行いやすい
.PP
です。
.PP
貧弱だったりバギーだったりするかもしれませんがどうぞよろしく:)
.SS "feedback"
.IX Subsection "feedback"
DBIx::Skinnyのfeedbackをしたいと思う人は
#perl\-casual@irc.freenode.netもしくは#dbix\-skinny@irc.perl.orgまたはメールでお願いします。
