.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Skinny::Row 3"
.TH DBIx::Skinny::Row 3 "2011-02-10" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Skinny::Row \- DBIx::Skinny's Row class
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$row\->get_column($column_name)" 4
.el .IP "\f(CW$row\fR\->get_column($column_name)" 4
.IX Item "$row->get_column($column_name)"
.Vb 1
\&    my $val = $row\->get_column($column_name);
.Ve
.Sp
get a column value from a row object.
.ie n .IP "$row\->get_columns" 4
.el .IP "\f(CW$row\fR\->get_columns" 4
.IX Item "$row->get_columns"
.Vb 1
\&    my %data = $row\->get_columns;
.Ve
.Sp
Does \f(CW\*(C`get_column\*(C'\fR, for all column values.
.ie n .IP "$row\->set(\e%new_row_data)  # has been deprecated" 4
.el .IP "\f(CW$row\fR\->set(\e%new_row_data)  # has been deprecated" 4
.IX Item "$row->set(%new_row_data) # has been deprecated"
.Vb 1
\&    $row\->set({$col => $val});
.Ve
.Sp
set columns data.
.ie n .IP "$row\->set_columns(\e%new_row_data)" 4
.el .IP "\f(CW$row\fR\->set_columns(\e%new_row_data)" 4
.IX Item "$row->set_columns(%new_row_data)"
.Vb 1
\&    $row\->set_columns({$col => $val});
.Ve
.Sp
set columns data.
.ie n .IP "$row\->set_column($col => $val)" 4
.el .IP "\f(CW$row\fR\->set_column($col => \f(CW$val\fR)" 4
.IX Item "$row->set_column($col => $val)"
.Vb 1
\&    $row\->set_column($col => $val);
.Ve
.Sp
set column data.
.ie n .IP "$row\->get_dirty_columns" 4
.el .IP "\f(CW$row\fR\->get_dirty_columns" 4
.IX Item "$row->get_dirty_columns"
returns those that have been changed.
.ie n .IP "$row\->insert" 4
.el .IP "\f(CW$row\fR\->insert" 4
.IX Item "$row->insert"
insert row data. call find_or_create method.
.ie n .IP "$row\->update([$arg, [$table_name]])" 4
.el .IP "\f(CW$row\fR\->update([$arg, [$table_name]])" 4
.IX Item "$row->update([$arg, [$table_name]])"
update is executed for instance record.
.Sp
It works by schema in which primary key exists.
.Sp
.Vb 4
\&    $row\->update({name => \*(Aqtokuhirom\*(Aq});
\&    # or 
\&    $row\->set({name => \*(Aqtokuhirom\*(Aq});
\&    $row\->update;
.Ve
.ie n .IP "$row\->delete([$table_name])" 4
.el .IP "\f(CW$row\fR\->delete([$table_name])" 4
.IX Item "$row->delete([$table_name])"
delete is executed for instance record.
.Sp
It works by schema in which primary key exists.
.ie n .IP "my $refetched_row = $row\->refetch($table_name);" 4
.el .IP "my \f(CW$refetched_row\fR = \f(CW$row\fR\->refetch($table_name);" 4
.IX Item "my $refetched_row = $row->refetch($table_name);"
\&\f(CW$table_name\fR is optional.
.Sp
refetch record from database. get new row object.
.ie n .IP "$row\->handle" 4
.el .IP "\f(CW$row\fR\->handle" 4
.IX Item "$row->handle"
get skinny object.
.Sp
.Vb 1
\&    $row\->handle\->single(\*(Aqtable\*(Aq, {id => 1});
.Ve
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 185:" 4
.IX Item "Around line 185:"
=over without closing =back
