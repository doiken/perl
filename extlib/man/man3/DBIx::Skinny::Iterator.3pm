.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Skinny::Iterator 3"
.TH DBIx::Skinny::Iterator 3 "2011-02-06" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Skinny::Iterator
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
skinny iteration class.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $itr = Your::Model\->search(\*(Aquser\*(Aq,{});
\&  
\&  $itr\->count; # show row counts
\&  
\&  my $row = $itr\->first; # get first row
\&  
\&  $itr\->reset; # reset itarator position
\&  
\&  my @rows = $itr\->all; # get all rows
\&  
\&  # do iteration
\&  while (my $row = $itr\->next) { }
\&
\&  # no cache row object (save memories)
\&  $itr\->cache(0);
\&  while (my $row = $itr\->next) { }
\&  $itr\->reset\->first;  # Can\*(Aqt fetch row!
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$itr\->first" 4
.el .IP "\f(CW$itr\fR\->first" 4
.IX Item "$itr->first"
get first row data.
.ie n .IP "$itr\->next" 4
.el .IP "\f(CW$itr\fR\->next" 4
.IX Item "$itr->next"
get next row data.
.ie n .IP "$itr\->all" 4
.el .IP "\f(CW$itr\fR\->all" 4
.IX Item "$itr->all"
get all row data.
.ie n .IP "$itr\->reset" 4
.el .IP "\f(CW$itr\fR\->reset" 4
.IX Item "$itr->reset"
this method reset iterator position number.
.ie n .IP "$itr\->count" 4
.el .IP "\f(CW$itr\fR\->count" 4
.IX Item "$itr->count"
The number of lines that iterator has are returned.
.ie n .IP "$itr\->no_cache # has been deprecated" 4
.el .IP "\f(CW$itr\fR\->no_cache # has been deprecated" 4
.IX Item "$itr->no_cache # has been deprecated"
.PD 0
.ie n .IP "$itr\->cache($mode)" 4
.el .IP "\f(CW$itr\fR\->cache($mode)" 4
.IX Item "$itr->cache($mode)"
.PD
DBIx::Skinny::Itarator is default row data cache.
this method specified that it doesn't cache row data or not.
.Sp
if \f(CW$mode\fR is false, it doesn't cache row data.
\&\f(CW$mode\fR is true, it dose cache row data.
.ie n .IP "$itr\->position" 4
.el .IP "\f(CW$itr\fR\->position" 4
.IX Item "$itr->position"
get iterator current position number.
.ie n .IP "$itr\->suppress_objects($mode)" 4
.el .IP "\f(CW$itr\fR\->suppress_objects($mode)" 4
.IX Item "$itr->suppress_objects($mode)"
set row object creation mode.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 154:" 4
.IX Item "Around line 154:"
=over without closing =back
