.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Scope::Container 3"
.TH Scope::Container 3 "2010-11-11" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Scope::Container \- scope based container
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Scope::Container;
\&
\&  sub getdb {
\&      if ( my $dbh = scope_container(\*(Aqdb\*(Aq) ) {
\&          return $dbh;
\&      } else {
\&          my $dbh = DBI\->connect(...);
\&          scope_container(\*(Aqdb\*(Aq, $dbh)
\&          return $dbh;
\&      }
\&  }
\&
\&  for (1..3) {
\&    my $contaier = start_scope_container();
\&    getdb(); # do connect
\&    getdb(); # from container
\&    getdb(); # from container
\&    # $container scope out and disconnect from db
\&  }
\&
\&  getdb(); # do connect
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Scope::Container is scope based container for temporary items and Database Connections.
.SH "EXPORTED FUNCTION"
.IX Header "EXPORTED FUNCTION"
.ie n .IP "my $scope_container = start_scope_container([\-clear => 1]);" 4
.el .IP "my \f(CW$scope_container\fR = start_scope_container([\-clear => 1]);" 4
.IX Item "my $scope_container = start_scope_container([-clear => 1]);"
Initializing container. The default behavior is inherited all the previous container's data.
If set \-clear arguments, save previous container's data and create new data.
.Sp
return values is Scope::Container object. if this object scope exits, current container will be removed, return to the previous state.
.ie n .IP "my $value = scope_container($key:Str[,$val:Any]);" 4
.el .IP "my \f(CW$value\fR = scope_container($key:Str[,$val:Any]);" 4
.IX Item "my $value = scope_container($key:Str[,$val:Any]);"
getter, setter of container data.
.IP "in_scope_container" 4
.IX Item "in_scope_container"
Check if context is initialized
.SH "LIMITATION"
.IX Header "LIMITATION"
There is a limit to the order in which the Scope::Container object is deleted. 
If race condition found, remove all data.
.PP
.Vb 4
\&  my $sc = start_scope_container();
\&  scope_container(\*(Aqbar\*(Aq, \*(Aqfoo\*(Aq);
\&  my $sc2 = start_scope_container();
\&  scope_container(\*(Aqbar\*(Aq, \*(Aqbaz\*(Aq);
\&
\&  undef $sc;
\&  scope_container(\*(Aqbar\*(Aq); #null
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Masahiro Nagano <kazeburo {at} gmail.com>
.PP
Fuji, Goro (gfx)
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
